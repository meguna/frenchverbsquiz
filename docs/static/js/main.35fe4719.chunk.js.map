{"version":3,"sources":["Quiz.jsx","App.js","serviceWorker.js","index.js"],"names":["WORD_BANK","dormir","servir","avoir","être","PRONOUNS","Quiz","props","state","currWord","currWordForms","currPronoun","answer","result","wrongCount","correctCount","onSubmit","bind","onAnswerChange","setRandom","this","rand","Math","floor","random","Object","keys","length","console","log","randPronoun","key","setState","indexOf","e","preventDefault","correct","getCorrectAnswer","prevState","setTimeout","target","value","className","type","placeholder","onChange","Component","App","Boolean","window","location","hostname","match","ReactDOM","render","document","getElementById","navigator","serviceWorker","ready","then","registration","unregister"],"mappings":"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","file":"static/js/main.35fe4719.chunk.js","sourcesContent":["import React, { Component } from 'react';\nimport './Quiz.css';\n\nconst WORD_BANK = {\n\tdormir: ['dors', 'dors', 'dort', 'dormons', 'dormez', 'dorment'],\n\tservir: ['sers', 'sers', 'sert', 'servons', 'servez', 'servent'],\n\tavoir: ['ai', 'as', 'a', 'avons', 'avez', 'ont'],\n\têtre: ['suis', 'es', 'est', 'sommes', 'êtes', 'sont'],\n}\n\nconst PRONOUNS = ['je', 'tu', 'il', 'elle', 'on', 'nous', 'vous', 'ils', 'elles'];\n\nclass Quiz extends Component {\n\tconstructor(props) {\n\t\tsuper(props);\n\t\tthis.state = {\n\t\t\tcurrWord: '',\n\t\t\tcurrWordForms: {},\n\t\t\tcurrPronoun: '',\n\t\t\tanswer: '',\n\t\t\tresult: -1,\n\t\t\twrongCount: 0,\n\t\t\tcorrectCount: 0,\n\t\t}\n\t\tthis.onSubmit = this.onSubmit.bind(this);\n\t\tthis.onAnswerChange = this.onAnswerChange.bind(this);\n\t\tthis.setRandom = this.setRandom.bind(this);\n\t}\n\n\tcomponentDidMount() {\n\t\tthis.setRandom();\n\t}\n\n\tsetRandom() {\n\t\tconst rand = Math.floor(Math.random() * Object.keys(WORD_BANK).length);\n\t\tconsole.log(rand);\n\t\tconst randPronoun = Math.floor(Math.random() * PRONOUNS.length);\n\t\tconst key = Object.keys(WORD_BANK)[rand]\n\t\tthis.setState({\n\t\t\tcurrWord: key,\n\t\t\tcurrWordForms: WORD_BANK[key],\n\t\t\tcurrPronoun: PRONOUNS[randPronoun],\n\t\t\tanswer: '',\n\t\t\tresult: -1,\n\t\t});\n\t}\n\n\tgetCorrectAnswer() {\n\t\tconst { currPronoun, currWordForms } = this.state;\n\t\tlet correct = ''\n\t\tif (currPronoun === 'elle' ||\n\t\t\tcurrPronoun === 'il' ||\n\t\t\tcurrPronoun === 'on') {\n\t\t\tcorrect = currWordForms[2];\n\t\t} else if (currPronoun === 'elles' ||\n\t\t\tcurrPronoun === 'ils') {\n\t\t\tcorrect = currWordForms[5];\n\t\t} else if (currPronoun === 'vous') {\n\t\t\tcorrect = currWordForms[4];\n\t\t} else {\n\t\t\tcorrect = currWordForms[PRONOUNS.indexOf(currPronoun)];\n\t\t}\n\t\treturn correct;\n\t}\n\n\tonSubmit(e) {\n\t\te.preventDefault();\n\t\tconst correct = this.getCorrectAnswer();\n\t\tconst { answer } = this.state;\n\t\tconsole.log(correct, answer);\n\t\tif (correct === answer) {\n\t\t\tthis.setState((prevState) => ({\n\t\t\t\tresult: 1,\n\t\t\t\tcorrectCount: prevState.correctCount + 1,\n\t\t\t}));\n\t\t\tsetTimeout(this.setRandom, 1000);\n\t\t} else {\n\t\t\tthis.setState((prevState) => ({\n\t\t\t\tresult: 0,\n\t\t\t\twrongCount: prevState.wrongCount + 1,\n\t\t\t}));\n\t\t\tsetTimeout(this.setRandom, 1000);\n\t\t}\n\t}\n\n\tonAnswerChange(e) {\n\t\tthis.setState({\n\t\t\tanswer: e.target.value,\n\t\t})\n\t}\n\n\trender() {\n\t\tconst {\n\t\t\tcurrWord,\n\t\t\tcurrPronoun,\n\t\t\tanswer,\n\t\t\tresult,\n\t\t\tcorrectCount,\n\t\t\twrongCount\n\t\t} = this.state;\n\t\treturn (\n\t\t\t<div>\n\t\t\t\t<p className=\"test-word\">{currWord}</p>\n\t\t\t\t<form onSubmit={this.onSubmit}>\n\t\t\t\t\t<span className=\"test-pronoun\">{currPronoun}</span>\n\t\t\t\t\t<input\n\t\t\t\t\t\tclassName=\"text-input\"\n\t\t\t\t\t\ttype=\"text\"\n\t\t\t\t\t\tplaceholder=\"type answer here\"\n\t\t\t\t\t\tvalue={answer}\n\t\t\t\t\t\tonChange={this.onAnswerChange}\n\t\t\t\t\t/>\n\t\t\t\t</form>\n\t\t\t\t<div>\n\t\t\t\t\t{(result === 1) && (\n\t\t\t\t\t\t<p className=\"correct-header\">Correct</p>\t\n\t\t\t\t\t)}\n\t\t\t\t\t{(result === 0) && (\n\t\t\t\t\t\t<p className=\"wrong-header\">Wrong!\n\t\t\t\t\t\tAnswer: {this.getCorrectAnswer()}</p>\n\t\t\t\t\t)}\n\t\t\t\t</div>\n\t\t\t\t<p>{correctCount} / {correctCount + wrongCount} correct</p>\n\t\t\t</div>\n\t\t)\n\t}\n}\n\nexport default Quiz;","import React from 'react';\nimport Quiz from './Quiz'\nimport './App.css';\n\nfunction App() {\n  return (\n    <div className=\"App\">\n      <h1 className=\"title\">French Verbs Quiz</h1>  \n      <Quiz />\n    </div>\n  );\n}\n\nexport default App;\n","// This optional code is used to register a service worker.\n// register() is not called by default.\n\n// This lets the app load faster on subsequent visits in production, and gives\n// it offline capabilities. However, it also means that developers (and users)\n// will only see deployed updates on subsequent visits to a page, after all the\n// existing tabs open on the page have been closed, since previously cached\n// resources are updated in the background.\n\n// To learn more about the benefits of this model and instructions on how to\n// opt-in, read https://bit.ly/CRA-PWA\n\nconst isLocalhost = Boolean(\n  window.location.hostname === 'localhost' ||\n    // [::1] is the IPv6 localhost address.\n    window.location.hostname === '[::1]' ||\n    // 127.0.0.1/8 is considered localhost for IPv4.\n    window.location.hostname.match(\n      /^127(?:\\.(?:25[0-5]|2[0-4][0-9]|[01]?[0-9][0-9]?)){3}$/\n    )\n);\n\nexport function register(config) {\n  if (process.env.NODE_ENV === 'production' && 'serviceWorker' in navigator) {\n    // The URL constructor is available in all browsers that support SW.\n    const publicUrl = new URL(process.env.PUBLIC_URL, window.location.href);\n    if (publicUrl.origin !== window.location.origin) {\n      // Our service worker won't work if PUBLIC_URL is on a different origin\n      // from what our page is served on. This might happen if a CDN is used to\n      // serve assets; see https://github.com/facebook/create-react-app/issues/2374\n      return;\n    }\n\n    window.addEventListener('load', () => {\n      const swUrl = `${process.env.PUBLIC_URL}/service-worker.js`;\n\n      if (isLocalhost) {\n        // This is running on localhost. Let's check if a service worker still exists or not.\n        checkValidServiceWorker(swUrl, config);\n\n        // Add some additional logging to localhost, pointing developers to the\n        // service worker/PWA documentation.\n        navigator.serviceWorker.ready.then(() => {\n          console.log(\n            'This web app is being served cache-first by a service ' +\n              'worker. To learn more, visit https://bit.ly/CRA-PWA'\n          );\n        });\n      } else {\n        // Is not localhost. Just register service worker\n        registerValidSW(swUrl, config);\n      }\n    });\n  }\n}\n\nfunction registerValidSW(swUrl, config) {\n  navigator.serviceWorker\n    .register(swUrl)\n    .then(registration => {\n      registration.onupdatefound = () => {\n        const installingWorker = registration.installing;\n        if (installingWorker == null) {\n          return;\n        }\n        installingWorker.onstatechange = () => {\n          if (installingWorker.state === 'installed') {\n            if (navigator.serviceWorker.controller) {\n              // At this point, the updated precached content has been fetched,\n              // but the previous service worker will still serve the older\n              // content until all client tabs are closed.\n              console.log(\n                'New content is available and will be used when all ' +\n                  'tabs for this page are closed. See https://bit.ly/CRA-PWA.'\n              );\n\n              // Execute callback\n              if (config && config.onUpdate) {\n                config.onUpdate(registration);\n              }\n            } else {\n              // At this point, everything has been precached.\n              // It's the perfect time to display a\n              // \"Content is cached for offline use.\" message.\n              console.log('Content is cached for offline use.');\n\n              // Execute callback\n              if (config && config.onSuccess) {\n                config.onSuccess(registration);\n              }\n            }\n          }\n        };\n      };\n    })\n    .catch(error => {\n      console.error('Error during service worker registration:', error);\n    });\n}\n\nfunction checkValidServiceWorker(swUrl, config) {\n  // Check if the service worker can be found. If it can't reload the page.\n  fetch(swUrl)\n    .then(response => {\n      // Ensure service worker exists, and that we really are getting a JS file.\n      const contentType = response.headers.get('content-type');\n      if (\n        response.status === 404 ||\n        (contentType != null && contentType.indexOf('javascript') === -1)\n      ) {\n        // No service worker found. Probably a different app. Reload the page.\n        navigator.serviceWorker.ready.then(registration => {\n          registration.unregister().then(() => {\n            window.location.reload();\n          });\n        });\n      } else {\n        // Service worker found. Proceed as normal.\n        registerValidSW(swUrl, config);\n      }\n    })\n    .catch(() => {\n      console.log(\n        'No internet connection found. App is running in offline mode.'\n      );\n    });\n}\n\nexport function unregister() {\n  if ('serviceWorker' in navigator) {\n    navigator.serviceWorker.ready.then(registration => {\n      registration.unregister();\n    });\n  }\n}\n","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport './index.css';\nimport App from './App';\nimport * as serviceWorker from './serviceWorker';\n\nReactDOM.render(<App />, document.getElementById('root'));\n\n// If you want your app to work offline and load faster, you can change\n// unregister() to register() below. Note this comes with some pitfalls.\n// Learn more about service workers: https://bit.ly/CRA-PWA\nserviceWorker.unregister();\n"],"sourceRoot":""}